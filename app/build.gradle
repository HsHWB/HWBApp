apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//如果是com.android.library表示这是一个 android library module 。

def path = "../markets.list"//在app模块根目录下访问项目目录用../

android {
    //要从相同项目中的模块访问这些属性，请在模块的 build.gradle 文件（您可以在以下部分了解有关此文件的详细信息）中使用以下语法。
    println(rootProject.getProjectDir())
    println(rootProject.ext.compileSdkVersion)

    compileSdkVersion rootProject.ext.compileSdkVersion //用于编译的 SDK 版本。
    buildToolsVersion rootProject.ext.buildToolVersion// 构建工具版本

    //Android 项目默认设置。
    defaultConfig {
        applicationId "com.huehn.initword" //应用程序包名。
        minSdkVersion rootProject.ext.minSdkVersion //最低支持 Android 版本。
        targetSdkVersion rootProject.ext.targetSdkVersion //目标版本。
        versionCode rootProject.ext.versionCode //版本号。
        versionName rootProject.ext.versionName //版本名称。
        flavorDimensions "$versionCode"
        // dex突破65535的限制
        multiDexEnabled true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    //使用Android studio生成了hwb.jsk，将它挪到项目，然后引用
    signingConfigs {
        release {
            storeFile file('key/hwb.jks')
            storePassword 'hwb123'
            keyAlias 'huehn'
            keyPassword 'hwb123'
        }
        debug {
            storeFile file('key/hwb.jks')
            storePassword 'hwb123'
            keyAlias 'huehn'
            keyPassword 'hwb123'
        }
    }


    buildTypes {
        release {
            debuggable true
            minifyEnabled false //是否使用混淆
            zipAlignEnabled true//Zipalign优化,内存对齐，google要求的
            shrinkResources false
//删除无效的Resource,shrinkResources依赖于minifyEnabled，必须和minifyEnabled一起用,这样生成的APK会小很多.
            //使用的混淆文件，一个是系统默认的混淆文件，
            // 它位于sdk\tools\proguard\proguard-android.txt。proguard-rules.pro文件是项目中自定义的混淆文件，比如有一些文件不能混淆的就keep住，就在这个文件写。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
        }


        debug {
            debuggable true
            minifyEnabled false //是否使用混淆
            zipAlignEnabled false //Zipalign优化,内存对齐，google要求的
            shrinkResources false
//删除无效的Resource,shrinkResources依赖于minifyEnabled，必须和minifyEnabled一起用,这样生成的APK会小很多.
            //使用的混淆文件，一个是系统默认的混淆文件，
            // 它位于sdk\tools\proguard\proguard-android.txt。proguard-rules.pro文件是项目中自定义的混淆文件，比如有一些文件不能混淆的就keep住，就在这个文件写。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.debug
        }
    }

    publishNonDefault true //设置没有默认发布类型
    //渠道配置，如果不配置渠道，则只有official和debug。配了渠道之后，每个渠道都有official和debug
    productFlavors {
        file(path).eachLine { line ->
            def channelName = line
            if (!channelName.trim().equals("")) {
                "$channelName" {
                    println("$channelName" + " is marking-------------------------------------------")
                    resValue "string", "channel_name", channelName
                }
                if ("qa".equals(channelName.trim())) {
                    qa {
                        applicationId "com.huehn.initword.test"
                        resValue "string", "app_name", "HWB App Test"
                    }
                } else if ("official".equals(channelName.trim())) {
                    official {
                        applicationId "com.huehn.initword"
                        resValue "string", "app_name", "HWB App"
                    }
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    viewBinding {
//        enabled = true
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

//    api project(":weex_core")
    implementation project(":core")
    implementation project(":basecomponent")

    //support library dependencies

    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    implementation 'com.google.android.material:material:1.0.0'

    implementation 'com.esotericsoftware.spine:spine-libgdx:3.5.51.1'

    implementation ('com.squareup.leakcanary:leakcanary-android:2.2',{
        exclude group: 'com.squareup.okio', module: 'okio'
    })
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    })
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.10"
}
